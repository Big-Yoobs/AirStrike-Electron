import { app, BrowserWindow, protocol } from 'electron';
import * as fs from "fs";
import * as Path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

{
    const baseName = Path.basename(__dirname);
    const separator = __dirname.slice(0, -baseName.length).split("").pop();
    const devSuffix = separator + ".webpack" + separator + "main";
    if (__dirname.endsWith(devSuffix)) {
        console.log("Dev environment detected");
        __dirname = __dirname.slice(0, -devSuffix.length);
        
    }
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    mainWindow.maximize();
    
    //input checking
    mainWindow.webContents.on('before-input-event', (event, input) => {
        // FULLSCREEN: Handle the F11 key press.
        if (input.key === 'F10') {
            event.preventDefault();
            mainWindow.setFullScreen(!mainWindow.isFullScreen());
        }

        // DEVTOOLS: Handle the F12 key press.
        if (input.key === 'F12') {
            event.preventDefault();
            mainWindow.webContents.toggleDevTools();
        }

        if (input.key === 'F5') {
            event.preventDefault();
            mainWindow.reload();
        }
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    createWindow();

    protocol.registerFileProtocol("content", (request, callback) => { // src="content://chungus"
        const contentName = request.url.substring(10);
        if (contentName.includes("..") || contentName.includes(":")) return callback(null);

        const path = Path.join(__dirname, "content", contentName);
        callback({path});
    });

    protocol.registerFileProtocol("avatar", (request, callback) => { // src="avatar://villainbiden"
        const avatarName = request.url.substring(9);
        const avatar = avatars.get(avatarName);
        if (!avatar) return callback(null);

        const path = Path.join(__dirname, "assets", "avatars", avatar);
        callback({path});
    });

    protocol.registerFileProtocol("emoji", (request, callback) => { // src="emoji://joecool"
        const emojiName = request.url.substring(8);
        const emoji = emojis.get(emojiName);
        if (!emoji) return callback(null);

        const path = Path.join(__dirname, "assets", "emojis", emoji);
        callback({path});
    });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

if (!fs.existsSync("content")) {
    fs.mkdirSync("content");
}

const avatars: Map<string, string> = new Map();
const avatarDir = fs.readdirSync(Path.join("assets", "avatars"));

for (let avatarCategory of avatarDir) {
    if (typeof avatarCategory != "string") continue;
    const avatarCatResults = fs.readdirSync(Path.join("assets", "avatars", avatarCategory));
    for (let avatar of avatarCatResults) {
        if (typeof avatar != "string" || !avatar.includes(".")) continue;
        const extension = Path.extname(avatar).toLowerCase();
        if (!["png", "jpg", "gif"].includes(extension.substring(1))) continue;
        avatars.set(avatar.slice(0, -extension.length), Path.join(avatarCategory, avatar));
    }
}


const emojis: Map<string, string> = new Map();
const emojiDir = fs.readdirSync(Path.join("assets", "emojis"));

for (let emojiCategory of emojiDir) {
    if (typeof emojiCategory != "string") continue;
    const emojiCatResults = fs.readdirSync(Path.join("assets", "emojis", emojiCategory));
    for (let emoji of emojiCatResults) {
        if (typeof emoji != "string" || !emoji.includes(".")) continue;
        const extension = Path.extname(emoji).toLowerCase();
        if (!["png", "jpg", "gif"].includes(extension.substring(1))) continue;
        emojis.set(emoji.slice(0, -extension.length), Path.join(emojiCategory, emoji));
    }
}